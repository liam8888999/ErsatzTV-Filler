<div class="form-group">
    <div class="input-group mb-3">
        <span class="input-group-text" id="basic-addon1"><%= key %></span>
        <input input id="<%= key %>" type name="<%= key %>" type="text" class="form-control" aria-label="<%= key %>" aria-describedby="<%= key %>" value="<%= label %>">
    </div>
</div>

<script>
    (async function(){
        const validate_response = () => {}
        const set_valid = () => {}
        const set_invalid = () => {}

        const save_changes = async (evt) => {
            try{
                const res = await fetch('/api/config/edit', {
                    method: "PATCH",
                    headers: {
                        "Content-type": "application/json; charset=UTF-8"
                    },
                    body: JSON.stringify({
                        key: evt.srcElement.id,
                        value: evt.srcElement.value
                    })
                })
                if(res.ok){
                    const jsonResponse = await res.json();
                    // Validate the response
                }
            }catch(e){
                //TODO: update this when we make the validation side on the server. Needs to catch 400 errors automatically for validation.
                logger.error(e)
            }
        }

        // Set listeners for focus out and key up events. Setting will be saved via either of those actions.
        const input_id = document.getElementById("<%= key %>")
        input_id.addEventListener("focusout", async (evt) => {
            await save_changes(evt)
        });
        input_id.addEventListener("keyup", async (evt) => {
            //keyCode is legacy support, doubt it's needed anymore
            if (evt.key === 'Enter' || evt.keyCode === 13) {
                await save_changes(evt)
            }
        });

        // Define an object with the strings you want to find and their corresponding replacements
        const replacements = {
          "^customaudio$": "Custom Audio Location",
          "^output$": "Output Directory",
          "^city$": "City",
          "^state$": "State",
          "^country$": "Country",
          "^videolength$": "Video Length",
          "^ersatztv$": "ErsatzTV Location (URL)",
          "^videoresolution$": "Video Resolution",
          "^webport$": "Web Port",
          "^fontfile$": "Custom Font File (unused)",
          "^webtheme$": "Webpage Theme (dark/light)",
          "^audiolanguage": "Audio Function Language (where available)",
          "^theme$": "Video Theme",
          "^processweather$": "Process Weather?",
          "^generate_weatherv4$": "Generate Weather V4 (Upcoming)",
          "^usewttrin$": "Use wttr.in Instead Of weatherforyou.net",
          "^readweather$": "Read The Weather",
          "^customweatherreaderscript": "Custom Weather Reader Script <br /><a onclick='returnWeatherJson()' href='#'>View Data</a> <a onclick='returnWeaterScript()' href='#'>View Scripts</a>",
          "^booked_code$": "<a href = 'https://www.booked.net/widgets/weather' target='_blank'>Booked.Net</a> Widget Code",
          "^weathervideofadeoutduration$": "Weather Video Fade Out Duration",
          "^weathervideofadeinduration$": "Weather Video Fade In Duration",
          "^weatheraudiofadeoutduration$": "Weather Audio Fade Out Duration",
          "^weatheraudiofadeinduration$": "Weather Audio Fade In Duration",
          "^weatherheader": "Weather Header text",
          "^showweatherheader": "Show the Weather Header?",
          "^weatherinterval$": "Weather Generation Interval",
          "^weatherduration": "Weather Video Duration",
          "^temperatureunits": "Temperature Units",
          "^processnews$": "Process News?",
          "^newsvideofadeoutduration$": "News Video Fade Out Duration",
          "^newsvideofadeinduration$": "News Video Fade In Duration",
          "^newsaudiofadeoutduration$": "News Audio Fade Out Duration",
          "^newsaudiofadeinduration$": "News Audio Fade In Duration",
          "^newsfeed$": "Newsfeed URL",
          "^newsduration$": "News Video Duration",
          "^newsarticles$": "News Articles To Display",
          "^readnews": "Read the News with text to Speech?",
          "^newsreadintro": "News Reader intro",
          "^newsreadoutro": "News Reader outro",
          "^readonlynewsheadings": "Read only the news headings?",
          "^shownewsheader": "Show the news header?",
          "^newsheadertext": "News header text",
          "^underlinenewsheader": "Underline News Header?",
          "^newsinterval$": "News Generation Interval",
          "^processchanneloffline$": "Process Channel Offline?",
          "^offlineinterval$": "Channel Offline Generation Interval",
          "^processxmltvmerger$": "Run XMLTVMERGER at set interval?",
          "^epgfiles$": "EPG Files To Merge",
          "mergexmltvondemand": "Run XMLTVMERGER on demand? (experimental)",
          "^xmltvmergeinterval$": "XMLTVMERGER Interval",
          "^processvanitycards$": "Process Vanity Cards?",
          "^amountvanitycards$": "Amount of Vanity Card Videos",
          "^vanitycardduration": "Vanity Card Video Duration",
          "^vanityinterval$": "Vanity Generation Interval",
          "^ffmpegencoder$": "FFMPEG Encoder",
          "^hwaccel$": "HW Accel Mode",
          "^hwaccel_device$": "HW Accel Device",
          "^customffmpeg$": "Custom FFMPEG Command",
          "^processchannellogo": "Process Channel Logo Filler?",
          "^channellogovideofadeoutduration$": "Channel Logo Video Fade Out Duration",
          "^channellogovideofadeinduration$": "Channel Logo Video Fade In Duration",
          "^channellogoaudiofadeoutduration$": "Channel Logo Audio Fade Out Duration",
          "^channellogoaudiofadeinduration$": "Channel Logo Audio Fade In Duration",
          "^channellogointerval": "Channel Logo Interval",
          "^channellogoduration": "Channel Logo Video Duration",
          // Add more string replacements as needed
        };

        // Function to perform the replacements only within id="basic-addon1" elements
        function replaceStringsInAddon1() {
          // Loop through all elements with class "form-group"
          const formGroups = document.querySelectorAll('.form-group');
          formGroups.forEach(formGroup => {
            const addon1 = formGroup.querySelector('#basic-addon1');
            if (addon1) {
              for (const findString in replacements) {
                if (replacements.hasOwnProperty(findString)) {
                  const replaceString = replacements[findString];
                  addon1.innerHTML = addon1.innerHTML.replace(new RegExp(findString, "g"), replaceString);
                }
              }
            }
          });
        }

        // Replace strings only within id="basic-addon1" elements
        replaceStringsInAddon1();
    })();
</script>
