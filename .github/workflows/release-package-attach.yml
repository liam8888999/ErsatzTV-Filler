name: Attach Packages to release

on:
  release:
    types: [ published ]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: node22-linux-x64
            outfile: ersatztv-filler-linux
            ffmpegurl: "https://github.com/liam8888999/FFMPEGreleases/releases/download/FFMPEG/ffmpeg-linux"
            ffmpegfile: ffmpeg-linux
            ext: ""
          - os: macos-latest
            target: node22-macos-x64
            outfile: ersatztv-filler-macos
            ext: ""
            ffmpegurl: "https://github.com/liam8888999/FFMPEGreleases/releases/download/FFMPEG/ffmpeg-darwin"
            ffmpegfile: ffmpeg-darwin
          - os: windows-latest
            target: node22-win-x64
            outfile: ersatztv-filler-win
            ext: ".exe"
            ffmpegurl: "https://github.com/liam8888999/FFMPEGreleases/releases/download/FFMPEG/ffmpeg-windows.exe"
            ffmpegfile: ffmpeg-windown.exe

    steps:
      - name: Checkout code (fetch tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest Git tag
        id: get_tag
        shell: bash
        run: |
          ls
          tag=$(git describe --tags --abbrev=0 --always)
          echo "TAG=${tag}" >> $GITHUB_ENV
          echo "${tag}"

      - name: Set VERSION variable
        shell: bash
        run: |
          tag="${TAG:-none}"
          if [[ "$tag" == "none" ]]; then
            tag="${{ github.sha }}"
          fi
          # strip leading V if present
          echo "VERSION=${tag#V}" >> $GITHUB_ENV

      - name: Download ffmpeg
        uses: suisei-cn/actions-download-file@v1.3.0
        id: downloadffmpeg
        with:
          url: "${{ matrix.ffmpegurl }}"
          target: ffmpeg/

      - name: Make ffmpeg binary executable (linux / mac)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          chmod +x "ffmpeg/${{ matrix.ffmpegfile }}" || true

      - name: Show version
        run: echo "Version is ${{ env.VERSION }}"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22.16.0

      - name: Install Dependencies
        run: npm ci --legacy-peer-deps

      - name: Install pkg
        run: npm install -g @yao-pkg/pkg

      - name: Build binary with pkg
        run: |
          echo "Building target: ${{ matrix.target }}"
          pkg package.json --targets ${{ matrix.target }} --output "${{ matrix.outfile }}${{ matrix.ext }}"

      - name: Make binary executable (linux / mac)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          chmod +x "${{ matrix.outfile }}${{ matrix.ext }}" || true

      - name: Create builds directory (all OSes)
        run: |
          mkdir -p builds

      - name: Create ZIP (linux / mac)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          zip -j "builds/${{ matrix.outfile }}-${{ env.VERSION }}.zip" "${{ matrix.outfile }}${{ matrix.ext }}" README.md Changelog.md

      - name: Create ZIP (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path builds | Out-Null
          Compress-Archive -Path "${{ matrix.outfile }}${{ matrix.ext }}","README.md","Changelog.md" -DestinationPath "builds\\${{ matrix.outfile }}-${{ env.VERSION }}.zip" -Force

      - name: List build outputs
        if: runner.os != 'Windows'
        run: ls -la builds

      - name: List build outputs (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: Get-ChildItem -Force builds


      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ersatztv-filler-${{ matrix.outfile }}-${{ env.VERSION }}.zip
          path: builds/${{ matrix.outfile }}-${{ env.VERSION }}.zip

      - name: Upload Artifacts to Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            builds/${{ matrix.outfile }}-${{ env.VERSION }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
